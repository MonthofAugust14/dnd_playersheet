import tkinter as tk
import os
from PIL import ImageTk, Image
from tkinter import ttk

def window_center(width=1500, height=1200):
    sw = os.environ.get('SCREEN_WIDTH', screen_width)
    sh = os.environ.get('SCREEN_HEIGHT', screen_height)
    x = (int(sw)/2) - (width/2)
    y = (int(sh)/2) - (height/2)
    window.geometry('%dx%d+%d+%d' % (width, height, x, y))
'''
def resizer(e): #resizes the image to dynamically fit to the window
        global new_psBackground_image
        psBackground = Image.open("player_sheet.png")
        resized_bg = psBackground.resize((e.width, e.height), Image.ANTIALIAS)
        new_psBackground_image = ImageTk.PhotoImage(resized_bg)
        dndPlayerSheet["image"] = new_psBackground_image
'''

window = tk.Tk()
#Creates the canvas window
base = tk.Canvas(window, width=1000, height=2000, scrollregion=(0,0,2000,2000))
base.pack(fill=tk.BOTH, side=tk.LEFT, expand=True)
base.bind('<Configure>', lambda e: base.configure(scrollregion=base.bbox(tk.ALL)))

window.withdraw()
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
window.deiconify()
window.geometry(window_center())
window.update()

scroll = tk.Scrollbar(window, command=base.yview)
scroll.pack(side=tk.LEFT, fill=tk.Y)
base.config(yscrollcommand=scroll.set)

notebook = ttk.Notebook(base)

dndPlayerSheet = tk.Label(notebook, background="grey")
dndSpellSheet = tk.Label(notebook)
dndMonsterSheet = tk.Label(notebook)

notebook.add(dndPlayerSheet, text = "Playercard")
notebook.add(dndSpellSheet, text = "Spell Sheet")
notebook.add(dndMonsterSheet, text = "Monster Data")

notebook.pack(expand=True, fill="both") #expand = expand to fill space that is not used. fill = fill space on x and y axis "both".



#Character General Information
cName = tk.Label(dndPlayerSheet, text = "Character Name")
cName.grid(row=0, column=0)
cName_input = tk.Text(dndPlayerSheet, width=30, height=1)
cName_input.grid(row=0, column=1)
cClass = tk.Label(dndPlayerSheet, text="Class")
cClass.grid(row=1, column=0)
cClass_input = tk.Text(dndPlayerSheet, width=20, height=1)
cClass_input.grid(row=1, column=1)
cRace = tk.Label(dndPlayerSheet, text="Race")
cRace.grid(row=2, column=0)
cRace_input = tk.Text(dndPlayerSheet, width=20, height=1)
cRace_input.grid(row=2, column=1)
cLevel = tk.Label(dndPlayerSheet, text="Level")
cLevel.grid(row=3, column=0)
clevel_input = tk.Text(dndPlayerSheet, width=3, height=1)
clevel_input.grid(row=3, column=1)
cExperience = tk.Label(dndPlayerSheet, text="Experience Points")
cExperience.grid(row=4, column=0)
cExperience_input = tk.Text(dndPlayerSheet, width=10, height=1)
cExperience_input.grid(row=4, column=1)


pBonus = tk.Label(dndPlayerSheet, text="Proficiency Bonus")
pBonus.grid(row=5, column=0)
pBonus_input = tk.Text(dndPlayerSheet, width=2, height=1)
pBonus_input.grid(row=5, column=1)
pInpiration = tk.Checkbutton(dndPlayerSheet, text="Inspiration")
pInpiration.grid(row=6, column=0)


pCHitPoints = tk.Label(dndPlayerSheet, text="Current Health")
pCHitPoints.grid(row=5, column=3)
pCHitPoints_Num = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=3)
pCHitPoints_Num.grid(row=6, column=3)
pMHitPoints = tk.Label(dndPlayerSheet, text="Max Health")
pMHitPoints.grid(row=5, column=4)
pMHitPoints_Num = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=3)
pMHitPoints_Num.grid(row=6, column=4, columnspan=2, sticky="w")
pAC = tk.Label(dndPlayerSheet, text="Armor Class")
pAC.grid(row=5, column=7)
pAC_input = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=2)
pAC_input.grid(row=6, column=7)
pInitiative = tk.Label(dndPlayerSheet, text="Initiative")
pInitiative.grid(row=5, column=9)
pInitiative_input = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=2)
pInitiative_input.grid(row=6, column=9)
pSpeed = tk.Label(dndPlayerSheet, text="Speed")
pSpeed.grid(row=5, column=11)
pSpeed_input = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=2)
pSpeed_input.grid(row=6, column=11)

saveButton = tk.Button(dndPlayerSheet, text="Save")
saveButton.grid(row=0, column=6)

spacerTop = tk.Label(dndPlayerSheet, text="__________________")
spacerTop.grid(row=7, column=0, columnspan=2)

#Character Strength Stats
pStr = tk.Button(dndPlayerSheet, text = "Strength")
pStr.grid(row=8, column=1)
pStr_input = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=2)
pStr_input.grid(row=9, column=1)
pStr_ST = tk.Checkbutton(dndPlayerSheet, text = "Saving Throw")
pStr_ST.grid(row=10, column=0)
pStr_ST_Num = tk.Text(dndPlayerSheet, width=2, height=1, )
pStr_ST_Num.insert(tk.END, "22") #How to save the data inputed by the user *************************************
pStr_ST_Num.grid(row=10, column=1)
pAthletics = tk.Checkbutton(dndPlayerSheet, text = "Athletics")
pAthletics.grid(row=11, column=0)
pAthletics_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pAthletics_Num.grid(row=11, column=1)

#Character Dexterity Stats
pDex = tk.Button(dndPlayerSheet, text = "Dexterity")
pDex.grid(row=8, column=3)
pDex_input = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=2)
pDex_input.grid(row=9, column=3)
pDex_ST = tk.Checkbutton(dndPlayerSheet, text = "Saving Throw")
pDex_ST.grid(row=10, column=2)
pDex_ST_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pDex_ST_Num.grid(row=10, column=3)
pAcrobatics = tk.Checkbutton(dndPlayerSheet, text = "Acrobatics")
pAcrobatics.grid(row=11, column=2)
pAcrobatics_Num = tk.Text(dndPlayerSheet, width=2, heigh=1)
pAcrobatics_Num.grid(row=11, column=3)
pSlight_of_Hand = tk.Checkbutton(dndPlayerSheet, text = "Sleight of Hand")
pSlight_of_Hand.grid(row=12, column=2)
pSlight_of_Hand_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pSlight_of_Hand_Num.grid(row=12, column=3)
pStealth = tk.Checkbutton(dndPlayerSheet, text = "Stealth")
pStealth.grid(row=13, column=2)
pStealth_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pStealth_Num.grid(row=13, column=3)

#Players Constitution Stats
pCon = tk.Button(dndPlayerSheet, text = "Constitution")
pCon.grid(row=8, column=5)
pCon_input = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=2)
pCon_input.grid(row=9, column=5)
pCon_ST = tk.Checkbutton(dndPlayerSheet, text = "Saving Throw")
pCon_ST.grid(row=10, column=4)
pCon_ST_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pCon_ST_Num.grid(row=10, column=5)


#Players Intelligence Stats
pInt = tk.Button(dndPlayerSheet, text = "Intelligence")
pInt.grid(row=8, column=7)
pInt_input = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=2)
pInt_input.grid(row=9, column=7)
pInt_ST = tk.Checkbutton(dndPlayerSheet, text = "Saving Throw")
pInt_ST.grid(row=10, column=6)
pInt_ST_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pInt_ST_Num.grid(row=10, column=7)
pArcana = tk.Checkbutton(dndPlayerSheet, text = "Arcana")
pArcana.grid(row=11, column=6)
pArcana_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pArcana_Num.grid(row=11, column=7)
pHistory = tk.Checkbutton(dndPlayerSheet, text = "History")
pHistory.grid(row=12, column=6)
pHistory_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pHistory_Num.grid(row=12, column=7)
pInvestigation = tk.Checkbutton(dndPlayerSheet, text = "Investigation")
pInvestigation.grid(row=13, column=6)
pInvestigation_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pInvestigation_Num.grid(row=13, column=7)
pNature = tk.Checkbutton(dndPlayerSheet, text = "Nature")
pNature.grid(row=14, column=6)
pNature_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pNature_Num.grid(row=14, column=7)
pReligion = tk.Checkbutton(dndPlayerSheet, text = "Religion")
pReligion.grid(row=15, column=6)
pReligion_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pReligion_Num.grid(row=15, column=7)


#Characters Wisdom Stats
pWis = tk.Button(dndPlayerSheet, text = "Wisdom")
pWis.grid(row=8, column=9)
pWis_input = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=2)
pWis_input.grid(row=9, column=9)
pWis_ST = tk.Checkbutton(dndPlayerSheet, text = "Saving Throw")
pWis_ST.grid(row=10, column=8)
pWis_ST_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pWis_ST_Num.grid(row=10, column=9)
pAnimal_Handling = tk.Checkbutton(dndPlayerSheet, text = "Animal Handling")
pAnimal_Handling.grid(row=11, column=8)
pAnimal_Handling_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pAnimal_Handling_Num.grid(row=11, column=9)
pInsight = tk.Checkbutton(dndPlayerSheet, text = "Insight")
pInsight.grid(row=12, column=8)
pInsight_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pInsight_Num.grid(row=12, column=9)
pMedicine = tk.Checkbutton(dndPlayerSheet, text = "Medicine")
pMedicine.grid(row=13, column=8)
pMedicine_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pMedicine_Num.grid(row=13, column=9)
pPerception = tk.Checkbutton(dndPlayerSheet, text = "Perception")
pPerception.grid(row=14, column=8)
pPerception_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pPerception_Num.grid(row=14, column=9)
pSurvival = tk.Checkbutton(dndPlayerSheet, text = "Survival")
pSurvival.grid(row=15, column=8)
pSurvival_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pSurvival_Num.grid(row=15, column=9)
pPassiveWisdom = tk.Label(dndPlayerSheet, text="Passive Wisdom/Perception")
pPassiveWisdom.grid(row=16, column=8)
pPassiveWisdom_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pPassiveWisdom_Num.grid(row=16, column=9)

#Characters Charisma Stats
pChr = tk.Button(dndPlayerSheet, text = "Charisma")
pChr.grid(row=8, column=11)
pChr_input = tk.Text(dndPlayerSheet, height=1, font=("", 64), width=2)
pChr_input.grid(row=9, column=11)
pWis_ST = tk.Checkbutton(dndPlayerSheet, text = "Saving Throw")
pWis_ST.grid(row=10, column=10)
pWis_ST_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pWis_ST_Num.grid(row=10, column=11)
pDeception = tk.Checkbutton(dndPlayerSheet, text = "Deception")
pDeception.grid(row=11, column=10)
pDeception_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pDeception_Num.grid(row=11, column=11)
pIntimidation = tk.Checkbutton(dndPlayerSheet, text = "Intimidation")
pIntimidation.grid(row=12, column=10)
pIntimidation_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pIntimidation_Num.grid(row=12, column=11)
pPerformance = tk.Checkbutton(dndPlayerSheet, text = "Performance")
pPerformance.grid(row=13, column=10)
pPerformance_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pPerformance_Num.grid(row=13, column=11)
pPersuasion = tk.Checkbutton(dndPlayerSheet, text = "Persuasion")
pPersuasion.grid(row=14, column=10)
pPersuasion_Num = tk.Text(dndPlayerSheet, width=2, height=1)
pPersuasion_Num.grid(row=14, column=11)


#Weapon/Spell Attacks and information
pWeapon1 = tk.Label(dndPlayerSheet, text="Weapon/Spell")
pWeapon1.grid(row=18, column=0)
pWeapon1_Num = tk.Text(dndPlayerSheet, width=20, height=1)
pWeapon1_Num.grid(row=18, column=1)
pWeapon1Range = tk.Label(dndPlayerSheet, text="Range")
pWeapon1Range.grid(row=18, column=2)
pWeapon1Range_Num = tk.Text(dndPlayerSheet, width=5, height=1)
pWeapon1Range_Num.grid(row=18, column=3)
pWeapon1Type = tk.Label(dndPlayerSheet, text="Type")
pWeapon1Type.grid(row=19, column=0)
pWeapon1Type_Num = tk.Text(dndPlayerSheet, width=20, height=1)
pWeapon1Type_Num.grid(row=19, column=1)
pWeapon1AB = tk.Label(dndPlayerSheet, text="Attack Bonus")
pWeapon1AB.grid(row=19, column=2)
pWeapon1AB_Num = tk.Text(dndPlayerSheet, width=5, height=1)
pWeapon1AB_Num.grid(row=19, column=3)
pWeapon1Damage = tk.Label(dndPlayerSheet, text="Damage")
pWeapon1Damage.grid(row=19, column=4)
pWeapon1Damage_Num = tk.Text(dndPlayerSheet, width=7, height=1)
pWeapon1Damage_Num.grid(row=19, column=5)

pWeapon2 = tk.Label(dndPlayerSheet, text="Weapon/Spell")
pWeapon2.grid(row=21, column=0)
pWeapon2_Num = tk.Text(dndPlayerSheet, width=20, height=1)
pWeapon2_Num.grid(row=21, column=1)
pWeapon2Range = tk.Label(dndPlayerSheet, text="Range")
pWeapon2Range.grid(row=21, column=2)
pWeapon2Range_Num = tk.Text(dndPlayerSheet, width=5, height=1)
pWeapon2Range_Num.grid(row=21, column=3)
pWeapon2Type = tk.Label(dndPlayerSheet, text="Type")
pWeapon2Type.grid(row=22, column=0)
pWeapon2Type_Num = tk.Text(dndPlayerSheet, width=20, height=1)
pWeapon2Type_Num.grid(row=22, column=1)
pWeapon2AB = tk.Label(dndPlayerSheet, text="Attack Bonus")
pWeapon2AB.grid(row=22, column=2)
pWeapon2AB_Num = tk.Text(dndPlayerSheet, width=5, height=1)
pWeapon2AB_Num.grid(row=22, column=3)
pWeapon2Damage = tk.Label(dndPlayerSheet, text="Damage")
pWeapon2Damage.grid(row=22, column=4)
pWeapon2Damage_Num = tk.Text(dndPlayerSheet, width=7, height=1)
pWeapon2Damage_Num.grid(row=22, column=5)

pWeapon3 = tk.Label(dndPlayerSheet, text="Weapon/Spell")
pWeapon3.grid(row=24, column=0)
pWeapon3_Num = tk.Text(dndPlayerSheet, width=20, height=1)
pWeapon3_Num.grid(row=24, column=1)
pWeapon3Range = tk.Label(dndPlayerSheet, text="Range")
pWeapon3Range.grid(row=24, column=2)
pWeapon3Range_Num = tk.Text(dndPlayerSheet, width=5, height=1)
pWeapon3Range_Num.grid(row=24, column=3)
pWeapon3Type = tk.Label(dndPlayerSheet, text="Type")
pWeapon3Type.grid(row=25, column=0)
pWeapon3Type_Num = tk.Text(dndPlayerSheet, width=20, height=1)
pWeapon3Type_Num.grid(row=25, column=1)
pWeapon3AB = tk.Label(dndPlayerSheet, text="Attack Bonus")
pWeapon3AB.grid(row=25, column=2)
pWeapon3AB_Num = tk.Text(dndPlayerSheet, width=5, height=1)
pWeapon3AB_Num.grid(row=25, column=3)
pWeapon3Damage = tk.Label(dndPlayerSheet, text="Damage")
pWeapon3Damage.grid(row=25, column=4)
pWeapon3Damage_Num = tk.Text(dndPlayerSheet, width=7, height=1)
pWeapon3Damage_Num.grid(row=25, column=5)


#Equipped and Accessible Items
pEAItems = tk.Label(dndPlayerSheet, text="Equipped/Accessible Items")
pEAItems.grid(row=27, column=0)
pEAItems_Text = tk.Text(dndPlayerSheet, height=10, width=30)
pEAItems_Text.grid(row=28, column=0, columnspan=2, rowspan=5, sticky="w")
pEAItems_Text = tk.Text(dndPlayerSheet, height=10, width=30)
pEAItems_Text.grid(row=28, column=1, columnspan=2, rowspan=5, sticky="e")

#Features and Traits
pFT = tk.Label(dndPlayerSheet, text="Features and Traits")
pFT.grid(row=33, column=0)
pFT_Text = tk.Text(dndPlayerSheet, height=30)
pFT_Text.grid(row=34, column=0, columnspan=4, rowspan=5, sticky="w")

#dndPlayerSheet.grid_columnconfigure(0, weight=1)
#dndPlayerSheet.grid_rowconfigure(0, weight=1)


#notebook.bind('<Configure>', resizer) #Event of window being resized. Passes the height and width to e in the resizer function.

window.mainloop()

